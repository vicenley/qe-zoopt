spec:
  templates:
  - name: optimize-variational-circuit
    parent: generic-task
    inputs:
      parameters:
      - name: backend-specs
      - name: optimizer-specs
      - name: command
        value: bash main_script.sh
      artifacts:
      - name: ansatz
        path: /app/ansatz.json
      - name: initial-parameters
        path: /app/initial-parameters.json
      - name: qubit-operator
        path: /app/qubitop.json
      - name: parameter-grid
        path: /app/parameter_grid.json
        optional: True
      - name: main-script
        path: /app/main_script.sh
        raw:
          data: |
            qvm -S &
            quilc -S &
            source /app/usr/local/bin/compilers_and_libraries.sh
            python3 python_script.py
      - name: python-script
        path: /app/python_script.py
        raw:
          data: |
            import os
            from utils import save_optimization_results
            from optimize_pqc import optimize_variational_circuit
            from zquantum.core.circuit import load_circuit_template, load_circuit_template_params, save_circuit_template_params, load_parameter_grid
            from qeopenfermion import load_qubit_operator
            from zquantum.core.utils import create_object
            import json
            ansatz = load_circuit_template('ansatz.json')
            if os.path.isfile('initial-parameters.json'):
              initial_parameters = load_circuit_template_params('initial-parameters.json')
            else:
              initial_parameters = None
            # Load qubit op
            operator = load_qubit_operator('qubitop.json')
            # Load parameter grid
            if os.path.isfile('parameter_grid.json'):
              grid = load_parameter_grid('parameter_grid.json')
            else:
              grid = None
            optimizer_specs = {{inputs.parameters.optimizer-specs}}
            if grid is not None and optimizer_specs['function_name'] == 'GridSearchOptimizer':
              optimizer = create_object(optimizer_specs, grid=grid)
            else:
              optimizer = create_object(optimizer_specs)
            
            backend_specs = {{inputs.parameters.backend-specs}}
            backend = create_object(backend_specs)
            
            opt_results = optimize_variational_circuit(ansatz, operator, initial_parameters, backend, optimizer)
            save_optimization_results(opt_results, 'optimization-results.json')
            save_circuit_template_params(opt_results.opt_params, 'optimized_parameters.json')
    outputs:
      artifacts:
      - name: optimization-results
        path: /app/optimization-results.json
      - name: optimized-parameters
        path: /app/optimized_parameters.json
      
